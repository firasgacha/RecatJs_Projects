{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Firas GACHA\\\\Desktop\\\\Coursera_Projects\\\\test-part-2\\\\src\\\\components\\\\UserManager.js\";\nimport React from 'react'; // Task 7 import AppContext from './AppContext';\n\nimport './master.css';\n\nclass UserManager extends React.Component {\n  // Task 7 static contextType = AppContext;\n  // Task 6\n  // componentDidMount() {\n  //   console.log(\"UserManager.componentDidMount( )\");\n  //\n  //   // let the property in App point to this\n  //   // Task 7\n  //   // let appContext = this.context;\n  //   // appContext.userManager = this;\n  // }\n  //\n  // componentDidUpdate(prevProps, prevState) {\n  //   console.log(\"UserManager.componentDidUpdate( )\");\n  //\n  //   // only do this if the ID has changed\n  //\n  //   // Task 7\n  //   // if (prevState.userId !== this.state.userId) {\n  //   //\n  //   //   // calls ALL the event listeners and pass them the new user ID\n  //   //   this.idChangeListeners.forEach(listener => listener(this.state.userId));\n  //   // }\n  // }\n  constructor(props) {\n    super(props);\n    this.state = {\n      userId: \"\",\n      userName: \"\",\n      loggedIn: \"\",\n      instructions: \"Please log in comment on photos\",\n      userIdFieldValue: \"\",\n      passwordFieldValue: \"\"\n    }; // a list of objects that listen to ID change events\n    // Task 7 this.idChangeListeners = [];\n    // Task 2\n    // these are necessary for \"this\" to point to this object\n\n    this.handleUserIdChange = this.handleUserIdChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this); // Task 7 this.idChangeSubscribe = this.idChangeSubscribe.bind(this);\n\n    this.logIn = this.logIn.bind(this);\n    this.logOut = this.logOut.bind(this);\n  } // Task 3\n\n\n  handleUserIdChange(event) {}\n\n  handlePasswordChange(event) {} // this method is for listener to add themselves to the list so that\n  // they will get notified when the user ID has changed\n  // Task 7\n  // idChangeSubscribe(listener) {\n  //   console.log(\"UserManager.idChangeSubscribe()\");\n  //   this.idChangeListeners.push(listener);\n  //   console.log(this.idChangeListeners);\n  // }\n\n\n  logIn() {\n    this.setState({\n      loggedIn: true\n    }); // Task 2\n    // Task 3\n    // let userIdEntered = this.state.userIdFieldValue;\n    // let passwordEntered = this.state.passwordFieldValue;\n    //\n    // let successful = false;\n    // let userName = \"unknown\";\n    //\n    // // Simulated database lookup!!! We would not do this in real life!\n    //\n    // if (userIdEntered.trim() === \"harry\" && passwordEntered.trim() === \"12345\") {\n    //   userName = \"Harry Kong\";\n    //   successful = true;\n    // }\n    //\n    // if (userIdEntered.trim() === \"jenny\" && passwordEntered.trim() === \"12345\") {\n    //   userName = \"Jenny Luz\";\n    //   successful = true;\n    // }\n    //\n    // // Was the log in successful?\n    //\n    // if (successful) {\n    //   this.setState( { loggedIn: true, userId: userIdEntered.trim(), userName: userName, instructions: \"You can now comment on photos!\" },\n    //                   () => { this.props.logInCallback(this.state); } );\n    // }\n    // else {\n    //   this.setState( { instructions: \"Incorrect user ID or password. Try again.\" } );\n    // }\n  }\n\n  logOut() {\n    // Task 2\n    this.setState({\n      loggedIn: false\n    }); // Task 3\n    // this.setState( { instructions: \"Please log in to comment on photos.\" } )\n    // this.setState( { loggedIn: false } );\n    // Task 3 this.setState( { loggedIn: false, userId: \"\", userName: \"\", userIdFieldValue: \"\", passwordFieldValue: \"\" }, () => { this.props.logInCallback(this.state); } );\n  }\n\n  render() {\n    // Task 2\n    if (this.state.loggedIn) {\n      // logged in\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"user-manager-block user-manager-block-active-background\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }\n      }, \"Logged in as: \", \"\\xA0\", /*#__PURE__*/React.createElement(\"input\", {\n        className: \"button\",\n        type: \"button\",\n        value: \"Log Out\",\n        onClick: this.logOut,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 79\n        }\n      })));\n    } else {\n      // logged Out\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"user-manager-block user-manager-block-inactive-background\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }\n      }, \"user ID:\\xA0\", /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        onChange: this.handleUserIdChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 30\n        }\n      }), \"\\xA0 password:\\xA0\", /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        onChange: this.handlePasswordChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 28\n        }\n      }), \"\\xA0\", /*#__PURE__*/React.createElement(\"input\", {\n        className: \"button\",\n        type: \"button\",\n        value: \"Log In\",\n        onClick: this.logIn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }\n      })));\n    }\n  }\n\n}\n\nexport default UserManager;","map":{"version":3,"sources":["C:/Users/Firas GACHA/Desktop/Coursera_Projects/test-part-2/src/components/UserManager.js"],"names":["React","UserManager","Component","constructor","props","state","userId","userName","loggedIn","instructions","userIdFieldValue","passwordFieldValue","handleUserIdChange","bind","handlePasswordChange","logIn","logOut","event","setState","render"],"mappings":"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","sourcesContent":["import React from 'react';\n// Task 7 import AppContext from './AppContext';\nimport './master.css';\n\nclass UserManager extends React.Component {\n\n  // Task 7 static contextType = AppContext;\n\n// Task 6\n  // componentDidMount() {\n  //   console.log(\"UserManager.componentDidMount( )\");\n  //\n  //   // let the property in App point to this\n  //   // Task 7\n  //   // let appContext = this.context;\n  //   // appContext.userManager = this;\n  // }\n  //\n  // componentDidUpdate(prevProps, prevState) {\n  //   console.log(\"UserManager.componentDidUpdate( )\");\n  //\n  //   // only do this if the ID has changed\n  //\n  //   // Task 7\n  //   // if (prevState.userId !== this.state.userId) {\n  //   //\n  //   //   // calls ALL the event listeners and pass them the new user ID\n  //   //   this.idChangeListeners.forEach(listener => listener(this.state.userId));\n  //   // }\n  // }\n\n  constructor(props) {\n    super(props);\n\n    this.state={\n      userId : \"\",\n      userName : \"\",\n      loggedIn : \"\",\n      instructions : \"Please log in comment on photos\",\n      userIdFieldValue : \"\",\n      passwordFieldValue : \"\"\n    };\n    // a list of objects that listen to ID change events\n    // Task 7 this.idChangeListeners = [];\n\n    // Task 2\n\n    // these are necessary for \"this\" to point to this object\n    this.handleUserIdChange = this.handleUserIdChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    // Task 7 this.idChangeSubscribe = this.idChangeSubscribe.bind(this);\n    this.logIn = this.logIn.bind(this);\n    this.logOut = this.logOut.bind(this);\n  }\n\n  // Task 3\n  handleUserIdChange(event) {\n  }\n  \n  handlePasswordChange(event) {\n  \n  }\n\n  // this method is for listener to add themselves to the list so that\n  // they will get notified when the user ID has changed\n\n  // Task 7\n  // idChangeSubscribe(listener) {\n  //   console.log(\"UserManager.idChangeSubscribe()\");\n  //   this.idChangeListeners.push(listener);\n  //   console.log(this.idChangeListeners);\n  // }\n\n  logIn() {\n\n    this.setState({loggedIn: true});\n    // Task 2\n\n    // Task 3\n    // let userIdEntered = this.state.userIdFieldValue;\n    // let passwordEntered = this.state.passwordFieldValue;\n    //\n    // let successful = false;\n    // let userName = \"unknown\";\n    //\n    // // Simulated database lookup!!! We would not do this in real life!\n    //\n    // if (userIdEntered.trim() === \"harry\" && passwordEntered.trim() === \"12345\") {\n    //   userName = \"Harry Kong\";\n    //   successful = true;\n    // }\n    //\n    // if (userIdEntered.trim() === \"jenny\" && passwordEntered.trim() === \"12345\") {\n    //   userName = \"Jenny Luz\";\n    //   successful = true;\n    // }\n    //\n    // // Was the log in successful?\n    //\n    // if (successful) {\n    //   this.setState( { loggedIn: true, userId: userIdEntered.trim(), userName: userName, instructions: \"You can now comment on photos!\" },\n    //                   () => { this.props.logInCallback(this.state); } );\n    // }\n    // else {\n    //   this.setState( { instructions: \"Incorrect user ID or password. Try again.\" } );\n    // }\n\n  }\n\n  logOut() {\n\n    // Task 2\n\n    this.setState({loggedIn: false});\n    // Task 3\n    // this.setState( { instructions: \"Please log in to comment on photos.\" } )\n    // this.setState( { loggedIn: false } );\n    // Task 3 this.setState( { loggedIn: false, userId: \"\", userName: \"\", userIdFieldValue: \"\", passwordFieldValue: \"\" }, () => { this.props.logInCallback(this.state); } );\n  }\n\n  render() {\n    // Task 2\n    if (this.state.loggedIn) {\n        // logged in\n        return (\n          <div className=\"user-manager-block user-manager-block-active-background\">\n            <p>Logged in as: { /* Task 3: state attribute: userName */ }&nbsp;<input className=\"button\" type=\"button\" value=\"Log Out\" onClick={this.logOut} /></p>\n            { /* Task 4 */ }\n            { /* Task 3: state attribute instructions */ }\n          </div>\n        );\n    }\n    else {\n        // logged Out\n        return (\n          <div className=\"user-manager-block user-manager-block-inactive-background\">\n            <p>user ID:&nbsp;<input type=\"text\" onChange={this.handleUserIdChange}/>&nbsp;\n            password:&nbsp;<input type=\"text\" onChange={this.handlePasswordChange}/>&nbsp;\n            <input className=\"button\" type=\"button\" value=\"Log In\" onClick={this.logIn} /></p>\n            { /* Task 4 */ }\n            { /* Task 3: state attribute instructions */ }\n          </div>\n        );\n    }\n  }\n\n}\n\nexport default UserManager;\n"]},"metadata":{},"sourceType":"module"}